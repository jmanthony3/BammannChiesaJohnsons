name: CI
on:
  push:
    branches:
      - main
    tags: ['*']
  pull_request:
  workflow_dispatch:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: GLMakie Julia ${{ matrix.version }}
    env:
      MODERNGL_DEBUGGING: "true" # turn on errors when running OpenGL tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1' # automatically expands to the latest stable 1.x release of Julia
        os:
          - ubuntu-20.04
        arch:
          - x64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - run: sudo apt-get update && sudo apt-get install -y xorg-dev mesa-utils xvfb libgl1 freeglut3-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev xsettingsd x11-xserver-utils
      - name: Install Julia dependencies
        shell: julia --project=monorepo {0}
        run: |
          using Pkg;
          # dev mono repo versions
          pkg"registry up"
          Pkg.update()
          pkg"dev . MakieCore GLMakie ReferenceTests"
          DISPLAY=:0
          Pkg.update()
      - name: Run the tests
        id: referencetests
        continue-on-error: true
        run: >
          DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --color=yes --project=monorepo -e 'using Pkg; Pkg.test("GLMakie", coverage=true)'
          && echo "TESTS_SUCCESSFUL=true" >> $GITHUB_ENV
      - name: Upload test Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ReferenceImages_GLMakie_${{ matrix.version }}
          path: |
            ./GLMakie/test/reference_images/
      - name: Fail after artifacts if tests failed
        if: ${{ env.TESTS_SUCCESSFUL != 'true' }}
        run: exit 1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v5
        with:
          file: lcov.info
  # docs:
  #   name: Documentation
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: write # needed to allow julia-actions/cache to proactively delete old caches that it has created
  #     contents: write
  #     statuses: write
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: julia-actions/setup-julia@v2
  #       with:
  #         version: '1'
  #     - uses: julia-actions/cache@v2
  #     - name: Configure doc environment
  #       shell: julia --project=docs --color=yes {0}
  #       run: |
  #         using Pkg
  #         Pkg.develop(PackageSpec(path=pwd()))
  #         Pkg.instantiate()
  #     - uses: julia-actions/julia-buildpkg@v1
  #     - uses: julia-actions/julia-docdeploy@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
  #     - name: Run doctests
  #       shell: julia --project=docs --color=yes {0}
  #       run: |
  #         using Documenter: DocMeta, doctest
  #         using BammannChiesaJohnsons
  #         DocMeta.setdocmeta!(BammannChiesaJohnsons, :DocTestSetup, :(using BammannChiesaJohnsons); recursive=true)
  #         doctest(BammannChiesaJohnsons)
